<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.5">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Postal Code API - Performance Testing" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="Environment" elementType="Argument">
            <stringProp name="Argument.name">Environment</stringProp>
            <stringProp name="Argument.value">${__P(Environment,Accep)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="URL" elementType="Argument">
            <stringProp name="Argument.name">URL</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Account" elementType="Argument">
            <stringProp name="Argument.name">Account</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="RPS" elementType="Argument">
            <stringProp name="Argument.name">RPS</stringProp>
            <stringProp name="Argument.value">${__P(RPS,1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Bearer" elementType="Argument">
            <stringProp name="Argument.name">Bearer</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Output File" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller" enabled="true"/>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">filename = &quot;/test/report/&quot; + &quot;${__time(yyyy-MM-dd_HHmmss)}_Perf_PostalCode_&quot; + vars.get(&quot;Environment&quot;) + &quot;_&quot; + vars.get(&quot;RPS&quot;) + &quot;RPS.csv&quot;
props.put(&quot;filename&quot;,filename)
File outputFile = new File(filename)
outputFile.createNewFile()
outputFile &lt;&lt; &quot;Environment,accountID,callid,timeOfRequest,responseTime,requestId,status,errorCode,errorMessage,AddressStatus,AddressErrorCode,AddressErrorMessage\r\n&quot;
props.put(&quot;fileReady&quot;,&quot;true&quot;);</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
      </hashTree>
      <com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup guiclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroupGui" testclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup" testname="PostalCode API - ${Environment} - ${RPS}" enabled="true">
        <elementProp name="ThreadGroup.main_controller" elementType="com.blazemeter.jmeter.control.VirtualUserController"/>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="TargetLevel">${__tstFeedback(tputTimer,1,1000,1)}</stringProp>
        <stringProp name="RampUp">1</stringProp>
        <stringProp name="Steps">1</stringProp>
        <stringProp name="Hold">310</stringProp>
        <stringProp name="LogFilename"></stringProp>
        <stringProp name="Iterations"></stringProp>
        <stringProp name="Unit">S</stringProp>
      </com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <kg.apc.jmeter.timers.VariableThroughputTimer guiclass="kg.apc.jmeter.timers.VariableThroughputTimerGui" testclass="kg.apc.jmeter.timers.VariableThroughputTimer" testname="tputTimer" enabled="true">
          <collectionProp name="load_profile">
            <collectionProp name="716550668">
              <stringProp name="1146764959">${RPS}</stringProp>
              <stringProp name="1146764959">${RPS}</stringProp>
              <stringProp name="50547">300</stringProp>
            </collectionProp>
          </collectionProp>
        </kg.apc.jmeter.timers.VariableThroughputTimer>
        <hashTree/>
        <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <BackendListener guiclass="BackendListenerGui" testclass="BackendListener" testname="InfluxDB Backend Listener" enabled="true">
          <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="influxdbMetricsSender" elementType="Argument">
                <stringProp name="Argument.name">influxdbMetricsSender</stringProp>
                <stringProp name="Argument.value">org.apache.jmeter.visualizers.backend.influxdb.HttpMetricsSender</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="influxdbUrl" elementType="Argument">
                <stringProp name="Argument.name">influxdbUrl</stringProp>
                <stringProp name="Argument.value">http://internal-influxdb-test-647819415.eu-west-2.elb.amazonaws.com/write?db=_internal</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="application" elementType="Argument">
                <stringProp name="Argument.name">application</stringProp>
                <stringProp name="Argument.value">PostalCode_${Environment}_${RPS}RPS</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="measurement" elementType="Argument">
                <stringProp name="Argument.name">measurement</stringProp>
                <stringProp name="Argument.value">jmeter</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="summaryOnly" elementType="Argument">
                <stringProp name="Argument.name">summaryOnly</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="samplersRegex" elementType="Argument">
                <stringProp name="Argument.name">samplersRegex</stringProp>
                <stringProp name="Argument.value">.*</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="percentiles" elementType="Argument">
                <stringProp name="Argument.name">percentiles</stringProp>
                <stringProp name="Argument.value">99;95;90</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="testTitle" elementType="Argument">
                <stringProp name="Argument.name">testTitle</stringProp>
                <stringProp name="Argument.value">RealTimeMetrics</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="eventTags" elementType="Argument">
                <stringProp name="Argument.name">eventTags</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="classname">org.apache.jmeter.visualizers.backend.influxdb.InfluxdbBackendListenerClient</stringProp>
          <stringProp name="TestPlan.comments">Pointing to build pipeline</stringProp>
        </BackendListener>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
          <stringProp name="IfController.condition">${__groovy(props.get(&quot;fileReady&quot;) == &quot;true&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;accountId&quot;: &quot;QAPerf_Adddress&quot;,&#xd;
    &quot;callid&quot;: &quot;${Environment}_Perf_PostalCode_${__Random(0,1000000000)}&quot;,&#xd;
    &quot;callsource&quot;: &quot;${Environment}&quot;,&#xd;
    &quot;criteria&quot;: {&#xd;
        &quot;addresses&quot;: [&#xd;
            {&#xd;
                &quot;id&quot;: &quot;${__Random(0,100000)}&quot;,&#xd;
                &quot;addresstype&quot;: &quot;risk&quot;,&#xd;
                &quot;addressString&quot;: &quot;Flat 19 Parklands Court 164|Edgware Way|Edgware|Barnet|HA8 8JW&quot;&#xd;
            }&#xd;
        ]&#xd;
    }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${URL}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/Product</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">env = vars.get(&quot;Environment&quot;)
url = null
bearer = null


switch(env){
	case &quot;Test&quot;:
		url = &quot;internal-QEHProductAPI-TEST-1268438150.eu-west-2.elb.amazonaws.com&quot;
		bearer = &quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJjaWQiOiIwb2F6c3VhbmliTUVJaDg1cTBoNyJ9.bduE898t7iVGVdm-r6ySEo68Fr4Lrp9E3Rv8T5trn1k&quot;
	break
	case &quot;Accep&quot;:
		url = &quot;internal-QEHProductAPI-ACCP-602426714.eu-west-2.elb.amazonaws.com&quot;
		bearer = &quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJjaWQiOiIwb2F4aW16ZWd3VHhlR0dWNTBoNyJ9.kulhHIlxtx5i5-apGVGSVBoTTRaEMVGkRlyM3WR00Xk&quot;
	break
	case &quot;UAT&quot;:
		url = &quot;internal-qehapi-uat-alb-97399736.eu-west-2.elb.amazonaws.com&quot;
		bearer = &quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJjaWQiOiIwb2FhY3E1MjliSU9kSGhReTJwNyJ9.Lp4FhbLzaHmJyQHHVzMdhCXficQGTcuW9zbDEEh13B0&quot;
	break
	case &quot;pre-UAT&quot;:
		url = &quot;internal-QEHAPI-PreUAT-313521735.eu-west-2.elb.amazonaws.com&quot;
		bearer = &quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJjaWQiOiIwb2FhY3E1MjliSU9kSGhReTJwNyJ9.Lp4FhbLzaHmJyQHHVzMdhCXficQGTcuW9zbDEEh13B0&quot;
	break
	case &quot;Prod&quot;:
		url = &quot;internal-QEHAPI-Prod-ALB-1853281291.eu-west-2.elb.amazonaws.com&quot;
		bearer = &quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJjaWQiOiIwb2FhY3E2dzBwWnE0aFdpVDJwNyJ9.mo0tGGlq9HaoKztC2WOi3V0shiTgN8PJd4JD4dVmWBw&quot;
	break
	case &quot;pre-Prod&quot;:
		url = &quot;internal-QEHAPI-PreProd-123656047.eu-west-2.elb.amazonaws.com&quot;
		bearer = &quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJjaWQiOiIwb2FhY3E2dzBwWnE0aFdpVDJwNyJ9.mo0tGGlq9HaoKztC2WOi3V0shiTgN8PJd4JD4dVmWBw&quot;
	break
	case &quot;ProdIreland&quot;:
		url = &quot;internal-QEHProductAPI-Prod-2030784864.eu-west-1.elb.amazonaws.com&quot;
		bearer = &quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJjaWQiOiIwb2FhY3E2dzBwWnE0aFdpVDJwNyJ9.mo0tGGlq9HaoKztC2WOi3V0shiTgN8PJd4JD4dVmWBw&quot;
	break
	case &quot;pre-ProdIreland&quot;:
		url = &quot;internal-QEHProductAPI-PreProd-846336682.eu-west-1.elb.amazonaws.com&quot;
		bearer = &quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJjaWQiOiIwb2FhY3E2dzBwWnE0aFdpVDJwNyJ9.mo0tGGlq9HaoKztC2WOi3V0shiTgN8PJd4JD4dVmWBw&quot;
	break
}

vars.put(&quot;URL&quot;,url)
vars.put(&quot;Bearer&quot;,bearer)</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">status = vars.get(&quot;status&quot;);
error = vars.get(&quot;errorMessage&quot;);
message = &quot;&quot;;

if (status != &quot;OK&quot; &amp;&amp; !prev.getResponseCode().contains(&quot;SocketException&quot;) &amp;&amp; !prev.getResponseCode().contains(&quot;InterruptedIOException&quot;)  &amp;&amp; !prev.getResponseCode().contains(&quot;RequestAbortedException&quot;)){
	message = &quot;Global Error: &quot; + error;
	AssertionResult.setFailure(true);
}
else {
	status = vars.get(&quot;AddressStatus&quot;);
	error = vars.get(&quot;AddressErrorCode&quot;);
	code = vars.get(&quot;AddressErrorMessage&quot;);

	if (status != &quot;OK&quot; &amp;&amp; code != &quot;No_Matches_Found&quot; &amp;&amp; !prev.getResponseCode().contains(&quot;SocketException&quot;) &amp;&amp; !prev.getResponseCode().contains(&quot;InterruptedIOException&quot;)  &amp;&amp; !prev.getResponseCode().contains(&quot;RequestAbortedException&quot;)){
		message = &quot;Address Error: &quot; + error;
		AssertionResult.setFailure(true);	
	}
}

if (AssertionResult.isFailure() == true){
	AssertionResult.setFailureMessage(message);
}</stringProp>
            </JSR223Assertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">callId;timeOfRequest;responseTime;requestId;status;errorCode;errorMessage;AddressStatus;AddressErrorCode;AddressErrorMessage</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.callId;$.timeOfRequest;$.responseTime;$.requestId;$.status;$.errorCode;$.errorMessage;$.output.addresses[0].status;$.output.addresses[0].errorCode;$.output.addresses[0].errorMessage</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues"> ; ; ; ; ; ; ; ; ; </stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSR223Listener guiclass="TestBeanGUI" testclass="JSR223Listener" testname="JSR223 Listener" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">if(!prev.getResponseCode().contains(&quot;SocketException&quot;) &amp;&amp; !prev.getResponseCode().contains(&quot;InterruptedIOException&quot;)  &amp;&amp; !prev.getResponseCode().contains(&quot;RequestAbortedException&quot;)){
filename = props.get(&quot;filename&quot;)
File outputFile = new File(filename)
outputFile &lt;&lt; &quot;\&quot;&quot; + vars.get(&quot;Environment&quot;) + &quot;\&quot;,\&quot;&quot; + vars.get(&quot;Account&quot;) + &quot;\&quot;,\&quot;&quot; + vars.get(&quot;callId&quot;)  + &quot;\&quot;,\&quot;&quot; + vars.get(&quot;timeOfRequest&quot;) + &quot;\&quot;,\&quot;&quot; + vars.get(&quot;responseTime&quot;) + &quot;\&quot;,\&quot;&quot; + vars.get(&quot;requestId&quot;) + &quot;\&quot;,\&quot;&quot; + vars.get(&quot;status&quot;) + &quot;\&quot;,\&quot;&quot; + vars.get(&quot;errorCode&quot;) + &quot;\&quot;,\&quot;&quot; + vars.get(&quot;errorMessage&quot;) + &quot;\&quot;,\&quot;&quot; + vars.get(&quot;AddressStatus&quot;) + &quot;\&quot;,\&quot;&quot; + vars.get(&quot;AddressErrorCode&quot;) + &quot;\&quot;,\&quot;&quot; + vars.get(&quot;AddressErrorMessage&quot;) + &quot;\&quot;\r\n&quot;
}</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Listener>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
